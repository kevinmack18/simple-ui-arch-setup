'use strict';

// modules
var gulp = require('gulp'),
	gulpif = require('gulp-if'),
	runSequence = require('run-sequence'),
	fs = require('fs'),
	gulpconcat = require('gulp-concat'),
	watch = require('gulp-watch'),
	gutil = require('gulp-util'),
	sass = require('gulp-ruby-sass'),
	sourcemaps = require('gulp-sourcemaps'),
	prefix = require('gulp-autoprefixer'),
	browserSync = require('browser-sync').create(),
	exec = require('child_process').exec,
	csso = require('gulp-csso');

// configuration
var config = {
	dev: gutil.env.dev,
	src: {
		html: {
			src: './src/**/*.html',
			dist: './_dist/'
		},
		colors: {
			src: './src/assets/ui-arch/scss/01-brand/colors.json',
			dist: './src/assets/ui-arch/scss/01-brand/'
		},
		styles: {
			core: './src/assets/ui-arch/scss/*.scss'
			// core: './src/**/*.scss'
		},
		fonts: {
			// src: './src/assets/fonts/**/*.{svg,eot,ttf,woff}',
			src: './src/assets/fonts/**/*',
			dist: '_dist/assets/fonts/'
		}
	},
	dest: '_dist'
};


// colors
// pulls JSON data and creates Sass color variables
gulp.task('colors', function() {
	var contents = require(config.src.colors.src),
		startMessage = '////////////////////////////////////////////////////////////////////////\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n// !!!! WARNING !!!! \n// THIS FILE (`' + config.src.colors.dist + '`)\n// IS GENERATED BY `' + config.src.colors.src + '` DO NOT EDIT THIS FILE \n// !!!! WARNING !!!!\n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n////////////////////////////////////////////////////////////////////////\n\n\n',
		intromsg = startMessage,
		obj = intromsg,
		extendobj,
		toTitleCase = function (str) {
			return str.replace(/\w\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});
		}


	fs.readFile(config.src.colors.src, function (err, contents) {
	  if (err) throw err;

		var data = JSON.parse(contents),
			brands = data.brands,
			brandslength = brands.length;

		for (var x = 0; x < brandslength; x++) {

			var colors = brands[x].colors,
				colorlength = colors.length,
				folderName = brands[x].src;


			for (var y = 0; y < colorlength; y++) {
				var color = colors[y],
					children = colors[y].extended,
					childrenlength = (children) ? children.length : 0,
					variablename = "",
					nameOnly = color.name.replace("color-","");


				obj += "$" + color.name +
					   ": " + color.value + ";\n";

				if (childrenlength > 0) {
					for (var z = 0; z < childrenlength; z++) {
						obj += '$' + children[z] + ": " + "$" + color.name + ";\n";

						if (z >= (childrenlength - 1)) {
							obj += "\n"
						}
					}
				} else {
					obj += "\n"
				}

			}

			obj += "\n\n\n$palette: (\n";

			colors = colors.filter(color => color.palette )


			for (var a = 0; a < colors.length; a++) {
				var color = colors[a];

					obj += "    \"" + color.name.replace("color-", "") + "\": (\"#{$" + color.name + "}\", \"#{$" + color.name + "-contrast}\")";

					if(colors.length -1  > a) {
						obj += ", \n";
					}

			}

			obj += "\n); \n\n\n\n" + intromsg;


			fs.writeFile(config.src.colors.dist + folderName + '/_00-settings_colors.scss', obj);

			intromsg = startMessage;
			obj = intromsg;
		}
	});

});


// make CSS from Sass
gulp.task('sass', function () {
	return sass(config.src.styles.core, {
    	})
        .on('error', function (err) {
            console.error('Error!', err.message);
        })
        .pipe(prefix('last 2 version'))
   		.pipe(gulpif((config.dev && !config.simple), sourcemaps.write('maps', {
	        includeContent: false,
	        sourceRoot: '.'
	    })))
   		.pipe(gulpif(!config.dev, csso()))
   		// .pipe(gulpif(!config.dev, csscomb()))
        .pipe(gulp.dest('_dist/assets/'));
        // .pipe(gulpif(config.dev, reload({stream:true})));
});


// fonts
gulp.task('fonts', function() {
	return gulp.src(config.src.fonts.src)
		.pipe(gulp.dest(config.src.fonts.dist + "/"));
});

// html
gulp.task('html', function() {
	return gulp.src(config.src.html.src)
		.pipe(gulp.dest(config.src.html.dist));
});


// Static Server + watching scss/html files
gulp.task('serve', ['sass'], function() {
    browserSync.init({
		server: "./_dist",
		port: 3003
    });

	// gulp.watch("./src/assets/fonts/**/*", ['fonts']);

    gulp.watch("src/**/*.html", ['html']);
    gulp.watch("src/**/*.html").on('change', browserSync.reload);
    gulp.watch("_dist/**/*.html").on('change', browserSync.reload);

    gulp.watch("src/assets/ui-arch/scss/01-brand/colors.json", ['sass']);
    // gulp.watch("src/assets/ui-arch/scss/01-brand/colors.json").on('change', browserSync.reload);

    gulp.watch("src/**/*.scss", ['sass']);
    gulp.watch("_dist/**/*.css").on('change', browserSync.reload);
});



// default build task
gulp.task('default', function () {
	// define build tasks
	var tasks = [
		// 'fonts',
		'html',
		'colors'
	];

	if (!config.dev) {
		tasks.push('sass');
	}

	// run build
	runSequence(tasks, function () {
		if (config.dev) {
			gulp.start('serve');
		}
	});

});
